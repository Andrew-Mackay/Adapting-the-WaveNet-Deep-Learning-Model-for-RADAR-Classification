# -*- coding: utf-8 -*-
"""replace_all_i_to_j.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gl7ub2jJOby5SGvXqPx2eZGrJ1MVXTuu
"""

# Needed for notebook version
# %matplotlib inline
# Needed to allow editing using PyCharm
# %load_ext autoreload
# %autoreload 2

import os
if os.getcwd() == '/content':
    from google.colab import drive
    drive.mount('/content/gdrive')
    BASE_PATH = '/content/gdrive/My Drive/Level-4-Project/'
    #!cd gdrive/My\ Drive/Level-4-Project/ && pip install --editable .
    os.chdir('gdrive/My Drive/Level-4-Project/')
    
elif os.getcwd() == 'D:\\Google Drive\\Level-4-Project\\notebooks\\data_processing' or os.getcwd() == 'D:\\Google Drive\\Level-4-Project\\src\\features':
    BASE_PATH = "D:/Google Drive/Level-4-Project/"
    
else:
    BASE_PATH = "/export/home/2192793m/Level-4-Project/"
    
DATA_PATH = BASE_PATH + 'data/'
RAW_PATH = DATA_PATH + 'raw/'
RAW_CONVERTED_PATH = RAW_PATH + "raw_converted/"

from src.features import make_spectrograms, process_labels, make_directory

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import mlab
from matplotlib import colors
from scipy.signal import butter, freqz, lfilter, spectrogram
import time
from sklearn import preprocessing

df_labels = pd.read_csv(RAW_PATH + 'Labels.csv')
df_labels.rename(columns={'dataset ID':'dataset_id'}, inplace=True)

df_labels = process_labels.process_labels(df_labels)

# Switches out i for j to ensure python compatibility
def convert_to_complex(complex_string):
    return complex(complex_string[0].replace('i', 'j'))

number_of_rows = df_labels.shape[0]
current_row = 1
for row in df_labels.itertuples():
    start_time = time.time()
    if row.dataset_id > 50:
        print("Processing row", current_row, "of", number_of_rows)
        print(str(row.dataset_id))
        file_name = RAW_PATH + "Dataset_" + str(row.dataset_id) + ".dat"
        radar_df = pd.read_table(file_name, sep="\n", header=None)
        converted = radar_df[4:].apply(convert_to_complex, axis=1)
        reshaped = converted.values.reshape(converted.shape[0], 1)
        radar_df[4:] = reshaped
        
        
        radar_df.to_csv(RAW_CONVERTED_PATH + "Dataset_" + str(row.dataset_id) + ".dat")

    current_row += 1
    time_for_row = (time.time() - start_time)/60
    print("---Row took %s minutes ---" % (int(time_for_row)))

